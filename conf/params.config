mparams {
    // Reference (pan)genome options. See README for details
    graph = ''     // (Required) Path to the rGFA/FASTA graph.
    graph_wmi = '' // (Optional) Path to the weaver graph index.
    genome = ''    // (Required) Path to the FASTA linear representation of the input graph.

    // Reference cache parameters
    ref_cache_tar_gz = ''
    ref_cache = ''

    // Input samples options
    map = ""
    remap = ""

    //! Set if make the output CRAM should be losslessly compressed
    lossless = false

    //! Run DeepVariant on output weaver BAM/CRAM
    run_deep_variant = false

    //! Run graphtyper call on output weaver BAM/CRAM
    run_graphtyper = false

    //! Options to use when crumbling a CRAM. ",reference=genome.fa" will be appended to this string
    crumble_cram_opts = '-1 -OCRAM,version=3.0,lossy_names=1,seqs_per_slice=25000'

    bed_file = ''

    //! Set to overwrite sample in read group (RG) string of previous BAM/CRAM header (option is only used when remapping)
    is_overwriting_sample_name_in_rg_string = false

    //! Set to enable marking duplicates (default true).
    is_marking_duplicates = true

    //! Set for using a custom read group header line
    read_group_header_line = ""


    // weaver options
    weaver_path = 'weaver'
    weaver_k = 23
    weaver_w = 11

    // Max resources options
    max_memory = '300.GB'
    max_cpus = 64
    max_time = '240.h'

    /**
     *  Genotyping options
     */
    customized_dv_model = ''
    bed_file = ''
}



process {
    executor = 'slurm'
    scratch = true

    cpus = { check_max(12, 'cpus') }
    memory = { check_max(64.GB + 32.GB * (task.attempt - 1), 'memory') }
    time = { check_max(200.h, 'time') }

    // errorStrategy = { task.exitStatus in [143,137,104,134,139,140,247] ? 'retry' : 'finish' }
    errorStrategy = 'retry'
    maxRetries    = 2
    // maxErrors     = 20
    maxErrors     = '-1'

    withLabel:weaver_index {
        cpus = { check_max(12, 'cpus') }
        memory = { check_max(96.GB + 48.GB * (task.attempt - 1), 'memory') }
        time = { check_max(200.h, 'time') }
    }

    withLabel:weaver_map {
        cpus = { check_max(12, 'cpus') }
        memory = { check_max(68.GB + 34.GB * (task.attempt - 1), 'memory') }
        time = { check_max(200.h, 'time') }
    }

    withLabel:weaver_remap {
        cpus = { check_max(12, 'cpus') }
        memory = { check_max(68.GB + 34.GB * (task.attempt - 1), 'memory') }
        time = { check_max(200.h, 'time') }
    }

    withLabel:deep_variant {
        cpus = { check_max(12, 'cpus') }
        memory = { check_max(48.GB + 24.GB * (task.attempt - 1), 'memory') }
        time = { check_max(200.h, 'time') }
    }

    withLabel:graphtyper {
        cpus = { check_max(16, 'cpus') }
        memory = { check_max(64.GB + 32.GB * (task.attempt - 1), 'memory') }
        time = { check_max(200.h, 'time') }
    }
}


executor {
    submitRateLimit = '1sec' // Not more than this many jobs per second
    queueSize = 400
}

// Function to ensure that resource requirements do not go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}